# example pipeline for Coverity scans using the Synopsys Security Scan extension for ADO
# https://marketplace.visualstudio.com/items?itemName=synopsys-security-scan.synopsys-security-scan
trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: CNC-EKS

steps:
  - script: |
      chmod 400 auth-key.txt
    displayName: Change mod of auth-key.txt

  - script: |
      pushd /tmp
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      unzip awscliv2.zip
      sudo ./aws/install --update
      rm -rf ./aws 
      which aws
      aws --version
      popd
    displayName: Download AWS-cli

  - script: |
      pushd /tmp
      export AWS_ACCESS_KEY_ID="$(AWS_ACCESS_KEY_ID)"
      export AWS_SECRET_ACCESS_KEY="$(AWS_SECRET_ACCESS_KEY)"
      export AWS_DEFAULT_REGION="$(AWS_DEFAULT_REGION)"
      echo $AWS_ACCESS_KEY_ID
      echo $AWS_SECRET_ACCESS_KEY
      echo $AWS_DEFAULT_REGION

      echo "aws s3 cp s3://cncdemo-uploads-bucket/license.dat"
      aws s3 cp s3://cncdemo-uploads-bucket/license.dat license.dat
      aws s3 cp s3://cncdemo-uploads-bucket/cov-analysis-linux64-2023.12.0.tar.gz cov-analysis-linux64-2023.12.0.tar.gz 

      tar xfvz cov-analysis-linux64-2023.12.0.tar.gz
      rm cov-analysis-linux64-2023.12.0.tar.gz
      mv cov-analysis-linux64-2023.12.0 /tmp
      cp -fv license.dat /tmp/cov-analysis-linux64-2023.12.0/bin
      popd
    displayName: Download Coverity Analysis

  - task: JavaToolInstaller@0
    displayName: "Use Java 17"
    inputs:
      versionSpec: 17
      jdkArchitectureOption: x64
      jdkSourceOption: PreInstalled

  - task: Maven@4
    displayName: "Maven Build"
    inputs:
      options: "-Drat.skip=true -DskipTests=true package"

  - task: SynopsysSecurityScan@1.3.2
    displayName: "Coverity Full Scan"
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))
    inputs:
      SCANTYPE: coverity
      BRIDGE_COVERITY_CONNECT_URL: $(COVERITY_URL)
      BRIDGE_COVERITY_CONNECT_USER_NAME: $(COVERITY_USER)
      BRIDGE_COVERITY_CONNECT_USER_PASSWORD: $(COVERITY_PASSPHRASE)
      BRIDGE_COVERITY_CONNECT_PROJECT_NAME: "commons-io"
      BRIDGE_COVERITY_CONNECT_STREAM_NAME: "commons-io"
      BRIDGE_COVERITY_CONNECT_POLICY_VIEW: "Outstanding Issues"
      BRIDGE_COVERITY_LOCAL: true
      BRIDGE_COVERITY_INSTALL_DIRECTORY: /tmp/cov-analysis-linux64-2023.12.0
      ### Uncomment below configuration if Synopsys Bridge diagnostic files needs to be uploaded
      # include_diagnostics: true

  - task: SynopsysSecurityScan@1.3.2
    displayName: "Coverity PR Scan"
    condition: eq(variables['Build.Reason'], 'PullRequest')
    inputs:
      scanType: coverity
      BRIDGE_COVERITY_CONNECT_URL: "$(COVERITY_URL)"
      bridge_coverity_connect_user_name: "$(COVERITY_USER)"
      bridge_coverity_connect_user_password: "$(COVERITY_PASSPHRASE)"
      bridge_coverity_connect_project_name: "commons-io"
      bridge_coverity_connect_stream_name: "commons-io-azure"
      bridge_coverity_automation_prComment: true
      azure_token: $(System.AccessToken)
      bridge_coverity_local: true
      bridge_coverity_install_directory: /tmp/cov-analysis-linux64-2023.12.0

  - task: ArchiveFiles@2
    displayName: "Copy Log Files"
    condition: succeededOrFailed()
    enabled: false
    inputs:
      rootFolderOrFile: .bridge
      includeRootFolder: false
      archiveFile: "$(Build.ArtifactStagingDirectory)/bridge-logs.zip"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Log Files"
    condition: succeededOrFailed()
    enabled: false
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "logs"
