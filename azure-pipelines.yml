parameters:
  - name: coverity_url
    displayName: Coverity URL
    type: string
    default: "http://k8s-cnc-ingressc-61c9622481-902802279.eu-west-1.elb.amazonaws.com "
  - name: coverity_username
    displayName: Coverity Username
    type: string
    default: "committer"
  - name: coverity_passphrase
    displayName: Coverity Passphrase
    type: string
    default: "hykfis-jaxvoS-funfo2"
  - name: coverity_checkers
    displayName: Coverity Checker Options
    type: string
    default: ""
  - name: coverity_build_command
    displayName: Coverity Build Command
    type: string
    default: ""
  - name: coverity_project_name
    displayName: Coverity Project Name
    type: string
    default: ""
  - name: coverity_stream_name
    displayName: Coverity Stream Name
    type: string
    default: ""
  - name: main_branches
    displayName: Main branches to run Coverity on
    type: object
    default:
      - refs/heads/main
      - refs/heads/master
      - refs/heads/test
  - name: security_gate_view_name
    displayName: Coverity Saved View for Security Gate
    type: string
    default: ""
  - name: create_project_and_stream
    displayName: Create project and stream in Coverity Connect
    type: boolean
    default: true

jobs:
  - job: Coverity

    variables:
      COVERITY_PROJECT_NAME: "${{ parameters.coverity_project_name }}"
      COVERITY_STREAM_NAME: "${{ parameters.coverity_stream_name }}"

    steps:
      # This step is helpful for troubleshooting
      - bash: env
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)
        displayName: Diagnostics

      # Create project and stream if they don't exist
      - bash: |
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          echo Ensure that stream "$COVERITY_STREAM_NAME" exists
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --add --set name:"$COVERITY_STREAM_NAME" || true
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode streams --add -set name:"$COVERITY_STREAM_NAME" || true
          echo cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
          cov-manage-im --url $COVERITY_URL --on-new-cert trust --mode projects --update --name "$COVERITY_STREAM_NAME" --insert stream:"$COVERITY_STREAM_NAME" || true
        displayName: Create project and stream
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      # Commit full analysis
      - bash: |
          export COVERITY_STREAM_NAME=${BUILD_REPOSITORY_NAME}-${BUILD_SOURCEBRANCHNAME}
          coverity scan --dir coverity-data/idir 
          cov-format-errors  --dir coverity-data/idir --json-output-v8 coverity-output-v8.json
        displayName: Commit full analysis results
        # Run full analysis only on builds of master, not on pull requests
        condition: eq(variables['Build.SourceBranchName'], 'master')
        env:
          COV_USER: $(COV_USER)
          COVERITY_PASSPHRASE: $(COVERITY_PASSPHRASE)

      - task: synopsys-coverity@1
        inputs:
          coverityBuildDirectory: '$(Build.Repository.LocalPath)'
          buildCommand: 